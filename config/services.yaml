# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    encryption_key: '%env(ENCRYPTION_KEY)%'
    personal_string: '%env(PERSONAL_STRING)%'
    cron_secret_token: '%env(CRON_SECRET_TOKEN)%'
    telegram_url: '%env(TELEGRAM_URL)%'
    admin_tg: '%env(ADMIN_TG)%'
    admin_wa: '%env(ADMIN_WA)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Alias the default ReCaptcha to v3
    ReCaptcha\ReCaptcha: '@ReCaptcha\ReCaptcha\V3'

    # Service for reCAPTCHA v3
    ReCaptcha\ReCaptcha\V3:
        class: ReCaptcha\ReCaptcha
        arguments:
            $secret: '%env(RECAPTCHA_SECRET_KEY)%'

    # Service for reCAPTCHA v2
    ReCaptcha\ReCaptcha\V2:
        class: ReCaptcha\ReCaptcha
        arguments:
            $secret: '%env(RECAPTCHA_SECRET_KEY_V2)%'

    App\Queue\Doctrine\Customer\CustomerCreatedConsumer:
        arguments:
#            $mailer: '@mailer'
#            $urlGenerator: '@router.default'

    Symfony\Component\PasswordHasher\Hasher\NativePasswordHasher:
        public: true

    App\Service\CryptoService:
        arguments:
            $params: '@parameter_bag'

    App\Service\VerificationWhatsAppService:
        arguments:
            $apiUrl: '%env(WAZZUP_API_URL)%'
            $apiToken: '%env(WAZZUP_API_TOKEN)%'

    App\Service\SendWhatsAppService:
        arguments:
            $apiUrl: '%env(WAZZUP_API_URL)%'
            $apiToken: '%env(WAZZUP_API_TOKEN)%'

    App\EventListener\CustomerHasNoteListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    App\EventListener\CustomerContactStatusListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    App\EventListener\CustomerHasBeneficiaryListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    App\EventListener\CustomerHasPipelineListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    App\Middleware\CheckCustomerExistenceMiddleware:
        tags:
            - { name: 'messenger.middleware', priority: 100 }

    App\EventSubscriber\LocaleSubscriber: ~

    App\EventListener\ContactVerifiedListener:
        tags:
            - { name: 'kernel.event_listener', event: 'App\Event\ContactVerifiedEvent', method: '__invoke' }

    App\CommandHandler\Action\Create\ActionCreateHandler:
        tags: [ 'messenger.message_handler' ]

    App\Service\SocialAppLinkNormalizer: ~

    App\Security\LoginFormAuthenticator:
        arguments:
            $recaptchaV3: '@ReCaptcha\ReCaptcha\V3'
            $recaptchaV2: '@ReCaptcha\ReCaptcha\V2'

    App\Controller\Customer\LoginController:
        arguments:
            $recaptchaV2: '@ReCaptcha\ReCaptcha\V2'

    App\Service\SupportEmailForwarderService:
        arguments:
            $admin_tg: '%env(ADMIN_TG)%'

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\EventListener\CustomerIsDeletedListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    App\EventListener\CustomerPaymentStatusListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 0 }

    App\Controller\Checkout\CreateInvoiceController:
        arguments:
            $apiKey: '%env(CRYPTOCLOUD_API_KEY)%'

    App\Service\Payment\CryptoCloudInvoiceVerifier:
        arguments:
            $apiKey: '%env(CRYPTOCLOUD_API_KEY)%'

    App\Service\Payment\CryptoCloudPaymentHandler:
        arguments:
            $apiKey: '%env(CRYPTOCLOUD_API_KEY)%'